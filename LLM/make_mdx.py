import os
import json
import time
import openai
from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from langchain.utilities import WikipediaAPIWrapper
from langchain.memory import ConversationBufferMemory
from langchain.chains import LLMChain, SequentialChain

os.environ["OPENAI_API_KEY"] = apikey
openai.api_key = os.getenv("OPENAI_API_KEY")
directory = "books/"
if not os.path.exists(directory):
    os.makedirs(directory)

def create_title(prompt):
    title_template = PromptTemplate(
        input_variables=["topic"], template="write me a book title about {topic}"
    )

    llm = OpenAI(temperature=0.9)
    title_memory = ConversationBufferMemory(
        input_key="topic", memory_key="chat_history"
    )
    title_chain = LLMChain(
        llm=llm,
        prompt=title_template,
        verbose=True,
        output_key="title",
        memory=title_memory,
    )
    title = title_chain.run(prompt)
    print(f"Title: {title}\n")
    return title

def create_description(title):
    title_template = PromptTemplate(
        input_variables=["title"], template="In one to two sentences write a description about {title}"
    )

    llm = OpenAI(temperature=0.9)
    title_memory = ConversationBufferMemory(
        input_key="title", memory_key="chat_history"
    )
    title_chain = LLMChain(
        llm=llm,
        prompt=title_template,
        verbose=True,
        output_key="description",
        memory=title_memory,
    )
    title = title_chain.run(prompt)
    print(f"Title: {title}\n")
    return title

def create_index(title):
    print("Initializing creation of index...")
    index_prompt = f"""Write me a book outline on a book called '{title}' with 11 chapters. Each chapter has 4 topics, output as a 
    json code. Please make sure to not say anything else except output the code. Assuming multiple chapters, it should look exactly 
    like the following in terms of structure: 
        {{\"Title\": \"\",\"Chapters\": [{{\"Chapter 1\": \"\",\"Topics\": [\"\", \"\", \"\"]}},{{\"Chapter 2\": 
        \"\",\"Topics\": [\"\", \"\", \"\"]}},{{\"Chapter 3\": \"\",\"Topics\": [\"\", \"\", \"\"]}}]}}"""

    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=index_prompt,
        temperature=0.9,
        max_tokens=1500,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0.6,
        stop=[" Human:", " AI:"],
    )

    response_dict = response.choices[0].to_dict()
    print(json.dumps(response_dict, indent=4))
    return response_dict


def create_chapter(index):
    json_string = index["text"]
    json_string = json_string[2:]
    data = json.loads(json_string)
    chapters = data["Chapters"]
    title = data["Title"]

    article = ""
    for chapter in chapters:
        chapter_num, chapter_name = list(chapter.items())[0]
        topics = chapter["Topics"]

        article += f"## {chapter_name}\n\n"

        for topic in topics:
            llm = OpenAI(
                model="text-davinci-003",
                temperature=0.7,
                max_tokens=3700,
                top_p=1,
                frequency_penalty=0,
                presence_penalty=0,
            )
            topic_template = PromptTemplate(
                input_variables=["book", "chapter", "topic"],
                template=""" The following is a  book called '{book}' that has a chapter named '{chapter}', 
                the section name that needs to be focused on in the chapter is called '{topic}' and must be 2000 words. 
                I don't want transition words such as finally, conclusion, or overall. I don't want spaces between
                paragraphs and the beginning of all paragraphs must be indented:""",
            )

            topic_memory = ConversationBufferMemory(
                input_key="chapter", memory_key="chat_history"
            )
            topic_chain = LLMChain(
                llm=llm,
                prompt=topic_template,
                verbose=True,
                output_key="topic",
                memory=topic_memory,
            )
            topic_text = topic_chain.run(book=title, chapter=chapter_name, topic=topic)
            time.sleep(2)

            article += f"{topic_text}\n"
    return article


if __name__ == "__main__":
    prompt = input("Enter the topic here: ")

    if prompt:
        title = create_title(prompt)
        description = create_description(title)
        index = create_index(title)
        article = create_chapter(index)

        file_title = title.replace(' ', '-')
        with open(directory + f"{file_title}.mdx", "w") as f:
            f.write(f"""import {{ ArticleLayout }} from '@/components/ArticleLayout'
import Image from 'next/future/image'

export const meta = {{
  author: 'AutoGenerated',
  date: '2023-05-03',
  title: '{title}',
  description: '{description}',
}}

export default (props) => <ArticleLayout meta={{meta}} {{...props}} />\n\n""")
            f.write(article)
